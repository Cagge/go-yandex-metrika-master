package main

import (
	"encoding/json"
	"fmt"
)

type AutoGenerated3 struct {
	Query struct {
		Ids           []int    `json:"ids"`
		Dimensions    []string `json:"dimensions"`
		Metrics       []string `json:"metrics"`
		Sort          []string `json:"sort"`
		Date1A        string   `json:"date1_a"`
		Date2A        string   `json:"date2_a"`
		Date1B        string   `json:"date1_b"`
		Date2B        string   `json:"date2_b"`
		Limit         int      `json:"limit"`
		Offset        int      `json:"offset"`
		Group         string   `json:"group"`
		AutoGroupSize string   `json:"auto_group_size"`
		AttrName      string   `json:"attr_name"`
		Quantile      string   `json:"quantile"`
		OfflineWindow string   `json:"offline_window"`
		Attribution   string   `json:"attribution"`
		Currency      string   `json:"currency"`
		AdfoxEventID  string   `json:"adfox_event_id"`
	} `json:"query"`
	Data []struct {
		Dimensions []struct {
			IconID   string `json:"icon_id"`
			IconType string `json:"icon_type"`
			Name     string `json:"name"`
			ID       string `json:"id"`
		} `json:"dimensions"`
		Metrics struct {
			A []float64 `json:"a"`
			B []float64 `json:"b"`
		} `json:"metrics"`
	} `json:"data"`
	TotalRows             int     `json:"total_rows"`
	TotalRowsRounded      bool    `json:"total_rows_rounded"`
	Sampled               bool    `json:"sampled"`
	ContainsSensitiveData bool    `json:"contains_sensitive_data"`
	SampleShare           float64 `json:"sample_share"`
	SampleSize            int     `json:"sample_size"`
	SampleSpace           int     `json:"sample_space"`
	DataLag               int     `json:"data_lag"`
	Totals                struct {
		A []float64 `json:"a"`
		B []float64 `json:"b"`
	} `json:"totals"`
}

func pars_Compare(body []byte) {
	var v4 AutoGenerated3
	json.Unmarshal(body, &v4)
	out := 0.0
	//H2 = serchPhras{v4.Data[]}
	for _, v2 := range v4.Data {
		//fmt.Println(v.Data[v1])
		//fmt.Println(v2.Metrics[1])
		fmt.Println(v2.Metrics.A[0])
		fmt.Println(v2.Metrics.B[0])
		out = v2.Metrics.A[0] - v2.Metrics.B[0]
		fmt.Println(out)
	}
}
