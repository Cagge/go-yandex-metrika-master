package main

import (
	"fmt"
)

type A struct{}

func (a A) Foo() string {
	return "a"
}

type B struct {
	A
}

func (b B) Foo() string {
	return "b"
}

type C struct {
	A
}

func main() {
	b := B{}
	c := C{}

	fmt.Println(b.Foo(), c.Foo())
}

/*package main

import (
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
)

type pagetest struct {
	H1 []string
	//H2 float64
	//TE template.Template
}
type serchPhras struct {
	H1 float64
}
type serchCompare struct {
	H1 float64
}

//вытянуть значения по названию поисковика
var H pagetest
var H2 serchPhras

func main() {

	//	url := "https://api-metrika.yandex.ru/stat/v1/data?metrics=ym:s:visits,ym:s:pageviews&dimensions=ym:s:referer,ym:s:startURLDomain&date1=2022-01-01&limit=10&offset=1&pretty=true&ids=89940276"
	//sve norm url := "https://api-metrika.yandex.ru/stat/v1/data?metrics=ym:s:users&dimensions=ym:s:searchEngineRoot&date1=2023-01-01&date2=2023-01-21&filters=ym:s:trafficSource=='organic'&ids=89940276"
	//пыиатюсь получить визиты https://api-metrika.yandex.ru/stat/v1/data?metrics=ym:s:users&date1=2022-01-01&ids=89940276
	//
	pars_type := 2
	date1 := "yesterday&"
	date2 := "8daysAgo&"
	ids := "89672009"
	OAuth := "y0_AgAEA7qkZulmAAqUtwAAAADuBtQC0-49hzbLRMa-EKNvaScKvvcda4g"
	url := ""
	url2 := ""
	search_traff := "metrics=ym:s:users&dimensions=ym:s:searchEngineRoot&"
	search_phrases := "preset=sources_search_phrases&"
	preset := ""
	if pars_type == 0 {
		preset = search_traff
	} else if pars_type == 1 {
		preset = search_phrases
	} else if pars_type == 2 {
		preset = search_traff
	}
	if pars_type <= 1 {
		url = "https://api-metrika.yandex.net/stat/v1/data?" + preset + "filters=ym:s:trafficSource=='organic'&" + date1 + // & filters=ym:s:SearchPhrase=='*htuato*'
			date2 + "ids=" + ids
	} else {
		url = "https://api-metrika.yandex.net/stat/v1/data?" + preset + "filters=ym:s:trafficSource=='organic'&" + date1 + // & filters=ym:s:SearchPhrase=='*htuato*'
			date1 + "ids=" + ids
		url2 = "https://api-metrika.yandex.net/stat/v1/data?" + preset + "filters=ym:s:trafficSource=='organic'&" + date2 + // & filters=ym:s:SearchPhrase=='*htuato*'
			date2 + "ids=" + ids
	}
	url2 = "https://api-metrika.yandex.net/stat/v1/data?" + preset + "filters=ym:s:trafficSource=='organic'&" + date2 + // & filters=ym:s:SearchPhrase=='*htuato*'
		date2 + "ids=" + ids
	//preset=sources_search_phrases&filters=ym:s:trafficSource=='organic'&date1=2023-01-01&date2=2023-01-21&ids=89940276"
	method := "GET"

	client := &http.Client{}
	req, err := http.NewRequest(method, url, nil)

	if err != nil {
		fmt.Println(err)
		return
	}
	req.Header.Add("Authorization", "OAuth "+OAuth)

	//req.Header.Add("Cookie", "JSESSIONID=node011bw3jd3299mrja9af2agkrat16963824.node0")

	res, err := client.Do(req)
	if err != nil {
		fmt.Println(err)
		return
	}
	defer res.Body.Close()
	body, err := ioutil.ReadAll(res.Body)
	if err != nil {
		fmt.Println(err)
		return
	}

	client2 := &http.Client{}
	req2, err := http.NewRequest(method, url2, nil)
	fmt.Println(url2)
	fmt.Println(url)
	if err != nil {
		fmt.Println(err)
		return
	}
	req.Header.Add("Authorization", "OAuth "+OAuth)

	//req.Header.Add("Cookie", "JSESSIONID=node011bw3jd3299mrja9af2agkrat16963824.node0")

	res2, err := client2.Do(req2)
	if err != nil {
		fmt.Println(err)
		return
	}
	defer res2.Body.Close()
	body2, err := ioutil.ReadAll(res2.Body)
	if err != nil {
		fmt.Println(err)
		return
	}
	fmt.Println(body2)
	mux := http.NewServeMux()
	if pars_type == 0 {
		pars_uni_user(body)
		mux.HandleFunc("/", home)

	} else if pars_type == 1 {
		pars_serchPhras(body)
		mux.HandleFunc("/", HtmlSerchPhras)
	} else if pars_type == 2 {
		pars_uni_user(body)
		pars_uni_user(body2)
		mux.HandleFunc("/", home)
	}

	errt := http.ListenAndServe("127.0.0.1:4000", mux)
	log.Fatal(errt)
	//	H = pagetest{pars_uni_user(body)}
	//H = H + pagetest{pars_uni_user(body)}
	// tempPath := "C:/work/go/go-yandex-metrika-master/test.html"
	// t, errt := template.New("test.html").ParseFiles(tempPath)
	// if errt != nil {
	// 	fmt.Println(errt)
	// }
	// errt = t.Execute(os.Stdout, H)
	// if errt != nil {
	// 	fmt.Println(errt)
	// }

	// log.Println("Запуск сервера на http://127.0.0.1:4000")

	//fmt.Println(string(body))
	// var v AutoGenerated
	// json.Unmarshal(body, &v)
	//out := 0.0
	/*for _, v2 := range v.Data {
		//fmt.Println(v.Data[v1])
		//fmt.Println(v2.Metrics[1])
		out += v2.Metrics[1]

	}
	fmt.Println(out)*/
//fmt.Println(v)

// for _, v2 := range v.Data {
// 	//fmt.Println(v.Data[v1])
// 	//fmt.Println(v2.Metrics[0])
// 	metr := fmt.Sprintf("%v", v2.Metrics[0])
// 	str := v2.Dimensions[0].Name + " " + metr
// 	fmt.Println(str)
// 	// out += v2.Metrics[0]
// 	//fmt.Println(v2.Dimensions[0].Name)

// }
//fmt.Println(out)

// arr := make([]int, 0)
// te[100] = v.Data[1]
// fmt.Println(te[0])
//fmt.Println(v.Query.Dimensions)
//}
