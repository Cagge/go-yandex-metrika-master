package main

import (
	"encoding/json"
	"fmt"
)

type AutoGenerated struct {
	// Query struct {
	// 	Ids           []int    `json:"ids"`
	// 	Dimensions    []string `json:"dimensions"`
	// 	Metrics       []string `json:"metrics"`
	// 	Sort          []string `json:"sort"`
	// 	Date1         string   `json:"date1"`
	// 	Date2         string   `json:"date2"`
	// 	Limit         int      `json:"limit"`
	// 	Offset        int      `json:"offset"`
	// 	Group         string   `json:"group"`
	// 	AutoGroupSize string   `json:"auto_group_size"`
	// 	AttrName      string   `json:"attr_name"`
	// 	Quantile      string   `json:"quantile"`
	// 	OfflineWindow string   `json:"offline_window"`
	// 	Attribution   string   `json:"attribution"`
	// 	Currency      string   `json:"currency"`
	// 	AdfoxEventID  string   `json:"adfox_event_id"`
	// } `json:"query"`
	Data []struct {
		Dimensions []struct {
			Name string `json:"name"`
			//	ID      string `json:"id"`
			//	Favicon string `json:"favicon"`
		} `json:"dimensions"`
		Metrics []float64 `json:"metrics"`
	} `json:"data"`
	// TotalRows             int       `json:"total_rows"`
	// TotalRowsRounded      bool      `json:"total_rows_rounded"`
	// Sampled               bool      `json:"sampled"`
	// ContainsSensitiveData bool      `json:"contains_sensitive_data"`
	// SampleShare           float64   `json:"sample_share"`
	// SampleSize            int       `json:"sample_size"`
	// SampleSpace           int       `json:"sample_space"`
	// DataLag               int       `json:"data_lag"`
	// Totals                []float64 `json:"totals"`
	// Min                   []float64 `json:"min"`
	// Max                   []float64 `json:"max"`
}

func pars_uni_user(body []byte) {
	var v AutoGenerated
	json.Unmarshal(body, &v)

	//var strmega []string
	strmega := []string{}
	for _, v2 := range v.Data {

		//fmt.Println(v.Data[v1])
		//fmt.Println(v2.Metrics[0])
		metr := fmt.Sprintf("%v", v2.Metrics[0])

		str := v2.Dimensions[0].Name + " " + metr
		fmt.Println(str)
		strmega = append(strmega, str)

		// out += v2.Metrics[0]
		//fmt.Println(v2.Dimensions[0].Name)

	}
	H = pagetest{strmega}
	return
}
